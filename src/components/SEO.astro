---
export interface Props {
  title?: string;
  description?: string;
  canonical?: string;
  image?: string;
  imageAlt?: string;
  type?: 'website' | 'article';
  article?: {
    publishedTime?: string;
    modifiedTime?: string;
    author?: string;
    section?: string;
    tags?: string[];
  };
  noindex?: boolean;
  siteName?: string;
}

const {
  title = 'From the Dumpster Fire',
  description = 'Rescuing signal from the algorithmic inferno. A curated newsletter of essential reads, rescued from the endless scroll.',
  canonical,
  image = '/images/og-default.jpg',
  imageAlt = 'From the Dumpster Fire - Signal from the noise',
  type = 'website',
  article,
  noindex = false,
  siteName = 'From the Dumpster Fire'
} = Astro.props;

const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site);
const imageURL = new URL(image, Astro.site);

// Structured data for articles
const articleJsonLd = article && type === 'article' ? {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "description": description,
  "image": imageURL.toString(),
  "author": {
    "@type": "Person",
    "name": article.author || "From the Dumpster Fire"
  },
  "publisher": {
    "@type": "Organization",
    "name": siteName,
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/images/logo.png', Astro.site).toString()
    }
  },
  "datePublished": article.publishedTime,
  "dateModified": article.modifiedTime || article.publishedTime,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL.toString()
  }
} : null;

// Website structured data
const websiteJsonLd = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": siteName,
  "url": Astro.site?.toString(),
  "description": description,
  "potentialAction": {
    "@type": "SearchAction",
    "target": new URL('/search?q={search_term_string}', Astro.site).toString(),
    "query-input": "required name=search_term_string"
  }
};
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<link rel="canonical" href={canonicalURL} />

<!-- Robots -->
{noindex ? (
  <meta name="robots" content="noindex, nofollow" />
) : (
  <meta name="robots" content="index, follow" />
)}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageURL} />
<meta property="og:image:alt" content={imageAlt} />
<meta property="og:site_name" content={siteName} />

{article && type === 'article' && (
  <>
    <meta property="article:author" content={article.author} />
    {article.publishedTime && <meta property="article:published_time" content={article.publishedTime} />}
    {article.modifiedTime && <meta property="article:modified_time" content={article.modifiedTime} />}
    {article.section && <meta property="article:section" content={article.section} />}
    {article.tags && article.tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={imageURL} />
<meta property="twitter:image:alt" content={imageAlt} />

<!-- Additional Meta -->
<meta name="theme-color" content="#ffffff" />
<meta name="msapplication-TileColor" content="#ffffff" />

<!-- RSS Feed -->
<link rel="alternate" type="application/rss+xml" title={`${siteName} RSS Feed`} href="/rss.xml" />

<!-- JSON-LD Structured Data -->
{articleJsonLd && (
  <script type="application/ld+json" set:html={JSON.stringify(articleJsonLd)} />
)}

{type === 'website' && (
  <script type="application/ld+json" set:html={JSON.stringify(websiteJsonLd)} />
)}