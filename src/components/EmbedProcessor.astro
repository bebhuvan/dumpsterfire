---
import AutoEmbed from './AutoEmbed.astro';

// This component processes the slot content and looks for standalone embed URLs
// It's designed to work with the slot content in ArticleLayout
---

<div class="embed-processor">
  <slot />
</div>

<script>
  // Client-side processing to convert standalone URLs to embeds after page load
  function processEmbeds() {
    const processor = document.querySelector('.embed-processor');
    if (!processor) return;
    
    // Find all text nodes that contain standalone URLs
    const walker = document.createTreeWalker(
      processor,
      NodeFilter.SHOW_TEXT,
      null,
      false
    );
    
    const textNodes: Text[] = [];
    let node;
    while (node = walker.nextNode()) {
      textNodes.push(node as Text);
    }
    
    // Process each text node
    textNodes.forEach(textNode => {
      const text = textNode.textContent?.trim() || '';
      
      // Check if the entire text content is just a URL (standalone)
      const urlPattern = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be|spotify\.com|vimeo\.com|twitter\.com|x\.com|codepen\.io|gist\.github\.com|soundcloud\.com)[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=]+$/i;
      
      if (urlPattern.test(text)) {
        const fullUrl = text.startsWith('http') ? text : `https://${text}`;
        
        // Create embed container
        const embedContainer = document.createElement('div');
        embedContainer.className = 'auto-embed-container';
        embedContainer.innerHTML = `<iframe src="" data-embed-url="${fullUrl}" loading="lazy"></iframe>`;
        
        // Replace the text node with the embed
        textNode.parentNode?.replaceChild(embedContainer, textNode);
        
        // Process the embed URL
        processEmbedUrl(fullUrl, embedContainer);
      }
    });
  }
  
  function processEmbedUrl(url: string, container: HTMLElement) {
    try {
      const urlObj = new URL(url);
      const hostname = urlObj.hostname.toLowerCase();
      let embedData: { embedUrl: string; type: string; title: string } | null = null;
      
      // YouTube
      if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
        let videoId = '';
        
        if (hostname.includes('youtu.be')) {
          videoId = urlObj.pathname.slice(1);
        } else if (urlObj.searchParams.get('v')) {
          videoId = urlObj.searchParams.get('v')!;
        }
        
        if (videoId) {
          embedData = {
            type: 'youtube',
            embedUrl: `https://www.youtube.com/embed/${videoId}`,
            title: 'YouTube Video'
          };
        }
      }
      
      // Spotify
      else if (hostname.includes('spotify.com')) {
        const path = urlObj.pathname;
        if (path.includes('/track/') || path.includes('/album/') || path.includes('/playlist/')) {
          embedData = {
            type: 'spotify',
            embedUrl: url.replace('https://open.spotify.com', 'https://open.spotify.com/embed'),
            title: 'Spotify Content'
          };
        }
      }
      
      // Vimeo
      else if (hostname.includes('vimeo.com')) {
        const videoId = urlObj.pathname.split('/').pop();
        if (videoId && /^\d+$/.test(videoId)) {
          embedData = {
            type: 'vimeo',
            embedUrl: `https://player.vimeo.com/video/${videoId}`,
            title: 'Vimeo Video'
          };
        }
      }
      
      if (embedData) {
        container.setAttribute('data-embed-type', embedData.type);
        
        const iframe = container.querySelector('iframe');
        if (iframe) {
          iframe.src = embedData.embedUrl;
          iframe.title = embedData.title;
          iframe.setAttribute('frameborder', '0');
          iframe.setAttribute('allowfullscreen', '');
          iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
        }
        
        // Add source link
        const sourceDiv = document.createElement('div');
        sourceDiv.className = 'embed-source';
        sourceDiv.innerHTML = `<a href="${url}" target="_blank" rel="noopener noreferrer" class="embed-link">View on ${embedData.type.charAt(0).toUpperCase() + embedData.type.slice(1)}</a>`;
        container.appendChild(sourceDiv);
      } else {
        // Not an embeddable URL, restore original text
        container.outerHTML = `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`;
      }
    } catch (e) {
      // Invalid URL, restore original text
      container.outerHTML = url;
    }
  }
  
  // Run processing when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', processEmbeds);
  } else {
    processEmbeds();
  }
</script>

<style>
  .embed-processor {
    line-height: 1.7;
  }
  
  .auto-embed-container {
    margin: 2rem 0;
    border-radius: 8px;
    overflow: hidden;
    background: var(--bg-secondary);
    border: 1px solid var(--border-light);
  }
  
  .auto-embed-container iframe {
    width: 100%;
    height: 315px;
    border: none;
    display: block;
  }
  
  /* Platform-specific sizing */
  .auto-embed-container[data-embed-type="youtube"] iframe {
    height: 315px;
    aspect-ratio: 16/9;
  }
  
  .auto-embed-container[data-embed-type="spotify"] iframe {
    height: 352px;
  }
  
  .auto-embed-container[data-embed-type="vimeo"] iframe {
    height: 281px;
    aspect-ratio: 16/9;
  }
  
  .embed-source {
    padding: 0.75rem 1rem;
    background: rgba(0, 0, 0, 0.03);
    border-top: 1px solid var(--border-light);
  }
  
  .embed-link {
    font-size: 0.85rem;
    color: var(--text-tertiary);
    text-decoration: none;
    font-weight: 500;
  }
  
  .embed-link:hover {
    color: var(--text-secondary);
    text-decoration: underline;
  }
  
  @media (max-width: 768px) {
    .auto-embed-container iframe {
      height: 200px;
    }
    
    .auto-embed-container[data-embed-type="spotify"] iframe {
      height: 300px;
    }
  }
</style>