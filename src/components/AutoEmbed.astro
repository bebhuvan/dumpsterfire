---
export interface Props {
  url: string;
}

const { url } = Astro.props;

// Function to detect embed type and generate embed URL
function processEmbedUrl(url: string) {
  try {
    const urlObj = new URL(url);
    const hostname = urlObj.hostname.toLowerCase();
    
    // YouTube
    if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
      let videoId = '';
      
      if (hostname.includes('youtu.be')) {
        videoId = urlObj.pathname.slice(1);
      } else if (urlObj.searchParams.get('v')) {
        videoId = urlObj.searchParams.get('v')!;
      } else if (urlObj.pathname.includes('/embed/')) {
        videoId = urlObj.pathname.split('/embed/')[1];
      }
      
      if (videoId) {
        return {
          type: 'youtube',
          embedUrl: `https://www.youtube.com/embed/${videoId}`,
          title: 'YouTube Video'
        };
      }
    }
    
    // Spotify
    if (hostname.includes('spotify.com')) {
      const path = urlObj.pathname;
      if (path.includes('/track/') || path.includes('/album/') || path.includes('/playlist/') || path.includes('/artist/')) {
        const embedUrl = url.replace('https://open.spotify.com', 'https://open.spotify.com/embed');
        return {
          type: 'spotify',
          embedUrl,
          title: 'Spotify Content'
        };
      }
    }
    
    // Vimeo
    if (hostname.includes('vimeo.com')) {
      const videoId = urlObj.pathname.split('/').pop();
      if (videoId && /^\d+$/.test(videoId)) {
        return {
          type: 'vimeo',
          embedUrl: `https://player.vimeo.com/video/${videoId}`,
          title: 'Vimeo Video'
        };
      }
    }
    
    // Twitter/X
    if (hostname.includes('twitter.com') || hostname.includes('x.com')) {
      const tweetMatch = urlObj.pathname.match(/\/status\/(\d+)/);
      if (tweetMatch) {
        return {
          type: 'twitter',
          embedUrl: `https://platform.twitter.com/embed/Tweet.html?id=${tweetMatch[1]}`,
          title: 'Tweet'
        };
      }
    }
    
    // CodePen
    if (hostname.includes('codepen.io')) {
      const penMatch = urlObj.pathname.match(/\/pen\/([^\/]+)/);
      if (penMatch) {
        const user = urlObj.pathname.split('/')[1];
        return {
          type: 'codepen',
          embedUrl: `https://codepen.io/${user}/embed/${penMatch[1]}`,
          title: 'CodePen'
        };
      }
    }
    
    // GitHub Gist
    if (hostname.includes('gist.github.com')) {
      const gistId = urlObj.pathname.split('/').pop();
      if (gistId) {
        return {
          type: 'github-gist',
          embedUrl: `https://gist.github.com${urlObj.pathname}.js`,
          title: 'GitHub Gist'
        };
      }
    }
    
    // SoundCloud
    if (hostname.includes('soundcloud.com')) {
      return {
        type: 'soundcloud',
        embedUrl: `https://w.soundcloud.com/player/?url=${encodeURIComponent(url)}&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true`,
        title: 'SoundCloud Audio'
      };
    }
    
  } catch (e) {
    // Invalid URL
  }
  
  return null;
}

const embedData = processEmbedUrl(url);
---

{embedData && (
  <div class="auto-embed" data-embed-type={embedData.type}>
    {embedData.type === 'github-gist' ? (
      <script src={embedData.embedUrl}></script>
    ) : embedData.type === 'twitter' ? (
      <blockquote class="twitter-tweet">
        <a href={url}>View Tweet</a>
      </blockquote>
      <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
    ) : (
      <iframe
        src={embedData.embedUrl}
        title={embedData.title}
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen
        loading="lazy"
      ></iframe>
    )}
    <div class="embed-source">
      <a href={url} target="_blank" rel="noopener noreferrer" class="embed-link">
        View on {embedData.type.charAt(0).toUpperCase() + embedData.type.slice(1).replace('-', ' ')}
      </a>
    </div>
  </div>
)}

{!embedData && (
  <div class="regular-link">
    <a href={url} target="_blank" rel="noopener noreferrer">{url}</a>
  </div>
)}

<style>
  .auto-embed {
    margin: 2rem 0;
    border-radius: 8px;
    overflow: hidden;
    background: var(--bg-secondary);
    border: 1px solid var(--border-light);
  }
  
  .auto-embed iframe {
    width: 100%;
    height: 400px;
    border: none;
    display: block;
  }
  
  /* YouTube specific sizing */
  .auto-embed[data-embed-type="youtube"] iframe {
    height: 315px;
    aspect-ratio: 16/9;
  }
  
  /* Spotify specific sizing */
  .auto-embed[data-embed-type="spotify"] iframe {
    height: 352px;
  }
  
  /* Vimeo specific sizing */
  .auto-embed[data-embed-type="vimeo"] iframe {
    height: 281px;
    aspect-ratio: 16/9;
  }
  
  /* Twitter specific styling */
  .auto-embed[data-embed-type="twitter"] {
    background: transparent;
    border: none;
    text-align: center;
  }
  
  .auto-embed[data-embed-type="twitter"] .twitter-tweet {
    margin: 0 auto !important;
  }
  
  /* CodePen specific sizing */
  .auto-embed[data-embed-type="codepen"] iframe {
    height: 400px;
  }
  
  /* SoundCloud specific sizing */
  .auto-embed[data-embed-type="soundcloud"] iframe {
    height: 166px;
  }
  
  /* GitHub Gist styling */
  .auto-embed[data-embed-type="github-gist"] {
    padding: 1rem;
    background: var(--bg-primary);
  }
  
  .embed-source {
    padding: 0.75rem 1rem;
    background: rgba(0, 0, 0, 0.03);
    border-top: 1px solid var(--border-light);
  }
  
  .embed-link {
    font-size: 0.85rem;
    color: var(--text-tertiary);
    text-decoration: none;
    font-weight: 500;
  }
  
  .embed-link:hover {
    color: var(--text-secondary);
    text-decoration: underline;
  }
  
  .regular-link {
    margin: 1rem 0;
    padding: 1rem;
    background: var(--accent-subtle);
    border-radius: 4px;
    border-left: 3px solid var(--pastel-blue);
  }
  
  .regular-link a {
    word-break: break-all;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
  }
  
  .regular-link a:hover {
    text-decoration: underline;
  }
  
  @media (max-width: 768px) {
    .auto-embed iframe {
      height: 250px;
    }
    
    .auto-embed[data-embed-type="youtube"] iframe {
      height: 200px;
    }
    
    .auto-embed[data-embed-type="vimeo"] iframe {
      height: 200px;
    }
    
    .auto-embed[data-embed-type="spotify"] iframe {
      height: 300px;
    }
  }
</style>